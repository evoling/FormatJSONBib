#!/usr/bin/env python3
"""
Functions for working with CSL JSON bibliographies in a Nikola static website
"""
import argparse
import sys
from os.path import expanduser, abspath, join, exists
from os.path import split as ossplit
from os import listdir
from FormatJSONBib.functions import transform, tidy, pdflink, rename, split

def main():
    parser = argparse.ArgumentParser(description=__doc__)
    subparsers = parser.add_subparsers()

    parser_transform = subparsers.add_parser("transform",
            description="""Transform JSON bibliography file into html""")
    parser_transform.add_argument("files", type=open, nargs="+", help="JSON files")
    parser_transform.add_argument("-u", "--skip-unknown", action="store_true",
            help="Skip entries with unrecognised type")
    parser_transform.add_argument("-i", "--skip-invalid", action="store_true",
            help="Skip entries that cannot be parsed")
    parser_transform.add_argument("-t", "--theme", choices=["plain",
            "bootstrap3"], default="plain", help="""Bootstrap3 theme includes
            a Nikola header, and is intended to be used as a complete page. The
            plain theme is an unordered list intended to be used as a snippet.""")
    parser_transform.set_defaults(func=transform)

    parser_tidy = subparsers.add_parser("tidy", description="""Adjust save
            format of json file""")
    parser_tidy.add_argument("files", type=open, nargs="+", help="JSON files")
    parser_tidy.add_argument("-d", "--drop-unused", action="store_true")
    parser_tidy.add_argument("-m", "--minify", action="store_true")
    parser_tidy.add_argument("-n", "--dry-run", action="store_true")
    parser_tidy.set_defaults(func=tidy)

    parser_pdflink = subparsers.add_parser("pdflink", description="""Add a
            pdf_path field to a json file pointing to a file in the Nikola
            'files' directory""")
    parser_pdflink.add_argument("jsonpath")
    parser_pdflink.add_argument("pdfpath", help="""The script will take the
            basename of this path, and append it to filedir""")
    parser_pdflink.add_argument("-f", "--filedir",
            default=get_default_files_dir(), 
            help="""Local filesystem path to the Nikola files directory
            [%(default)s]""")
    parser_pdflink.set_defaults(func=pdflink)

    parser_rename = subparsers.add_parser("rename", description="""Rename a
            json bibliography file by author-date-title""")
    parser_rename.add_argument("files", type=open, nargs="+", help="JSON files")
    parser_rename.add_argument("-n", "--dry-run", action="store_true")
    parser_rename.set_defaults(func=rename)

    parser_split = subparsers.add_parser("split", description="""Split a
            json file with multiple bibliographic entries into individual files""")
    parser_split.add_argument("file", type=open, help="JSON file")
    parser_split.add_argument("-d", "--delete", action="store_true",
            help="""Delete input file after splitting""")
    parser_split.set_defaults(func=split)

    args = parser.parse_args()
    args.func(args)
    return

def get_default_files_dir():
    """Ascend the directory hierarchy until we find a directory containing a
    directory called 'files'"""
    home = expanduser("~")
    current = abspath(".")
    while True:
        if "files" in listdir(current):
            return join(current, "files")
        current, _ = ossplit(current)
        if current == home:
            return "."
    raise ProgrammingError("Shouldn't ever get to this point")

if __name__ == "__main__":
    main()
